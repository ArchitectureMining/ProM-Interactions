EventTypeField <- "Tag_Type"
SourceField <- "Tag_StreamTypeName"
TargetField <- "Tag_EventHandlerInstance"
TrackingIDField <- "Tag_MC.TrackingId"
MetricNameField <- "MetricName"
kibana <- read.csv2("kibana_output.csv", sep=",")
useful_columns <- c(TrackingIDField, SourceField, TargetField, EventTypeField, MetricNameField)
kibana_cleaned <- dplyr::select(kibana, useful_columns)
#clean the field when they do not have the right things.
# could be implemented cleaner...
kibana_cleaned <- kibana_cleaned %>% filter(Tag_EventHandlerInstance != "") %>% filter(Tag_StreamTypeName != "") %>% filter(MetricName != "EventProcessingDelay") %>% filter(MetricName != "CreatedCommittable") %>% filter(MetricName != "RepositoryExecuteEvent") %>% mutate(across(everything(), as.character))
# Get rid of the second part in tag_Streamtypename (,AFAS.runtime)
kibana_cleaned$Tag_StreamTypeName = sub("\\,.*", "", as.character(kibana_cleaned$Tag_StreamTypeName))
#write.csv2(kibana_cleaned, "kibana_cleaned.csv", row.names = FALSE)
buildingDataFrame <- data.frame(TrackingIDField=character(), SourceField=character(), TargetField=character(), MetricNameField=character())
EventTypeIndex <- which(colnames(kibana_cleaned) == EventTypeField)
for(i in 1:nrow(kibana_cleaned)){
currentRow <- kibana_cleaned[i, ]
eventType <- currentRow[EventTypeIndex]
currentRow <- currentRow[-EventTypeIndex]
row1 <- currentRow
row1[TargetField]  <- eventType
row2 <- currentRow
row2[SourceField]  <- eventType
buildingDataFrame[nrow(buildingDataFrame) + 1,] = row1
buildingDataFrame[nrow(buildingDataFrame) + 1,] = row2
}
View(buildingDataFrame)
View(currentRow)
EventTypeField <- "Tag_Type"
SourceField <- "Tag_StreamTypeName"
TargetField <- "Tag_EventHandlerInstance"
TrackingIDField <- "Tag_MC.TrackingId"
MetricNameField <- "MetricName"
kibana <- read.csv2("kibana_output.csv", sep=",")
useful_columns <- c(TrackingIDField, SourceField, TargetField, EventTypeField, MetricNameField)
kibana_cleaned <- dplyr::select(kibana, useful_columns)
#clean the field when they do not have the right things.
# could be implemented cleaner...
kibana_cleaned <- kibana_cleaned %>% filter(Tag_EventHandlerInstance != "") %>% filter(Tag_StreamTypeName != "") %>% filter(MetricName != "EventProcessingDelay") %>% filter(MetricName != "CreatedCommittable") %>% filter(MetricName != "RepositoryExecuteEvent") %>% mutate(across(everything(), as.character))
# Get rid of the second part in tag_Streamtypename (,AFAS.runtime)
kibana_cleaned$Tag_StreamTypeName = sub("\\,.*", "", as.character(kibana_cleaned$Tag_StreamTypeName))
#write.csv2(kibana_cleaned, "kibana_cleaned.csv", row.names = FALSE)
buildingDataFrame <- matrix(ncol=4)
EventTypeIndex <- which(colnames(kibana_cleaned) == EventTypeField)
for(i in 1:nrow(kibana_cleaned)){
currentRow <- kibana_cleaned[i, ]
eventType <- currentRow[EventTypeIndex]
currentRow <- currentRow[-EventTypeIndex]
row1 <- currentRow
row1[TargetField]  <- eventType
row2 <- currentRow
row2[SourceField]  <- eventType
buildingDataFrame[nrow(buildingDataFrame) + 1,] = row1
buildingDataFrame[nrow(buildingDataFrame) + 1,] = row2
}
EventTypeField <- "Tag_Type"
SourceField <- "Tag_StreamTypeName"
TargetField <- "Tag_EventHandlerInstance"
TrackingIDField <- "Tag_MC.TrackingId"
MetricNameField <- "MetricName"
kibana <- read.csv2("kibana_output.csv", sep=",")
useful_columns <- c(TrackingIDField, SourceField, TargetField, EventTypeField, MetricNameField)
kibana_cleaned <- dplyr::select(kibana, useful_columns)
#clean the field when they do not have the right things.
# could be implemented cleaner...
kibana_cleaned <- kibana_cleaned %>% filter(Tag_EventHandlerInstance != "") %>% filter(Tag_StreamTypeName != "") %>% filter(MetricName != "EventProcessingDelay") %>% filter(MetricName != "CreatedCommittable") %>% filter(MetricName != "RepositoryExecuteEvent") %>% mutate(across(everything(), as.character))
# Get rid of the second part in tag_Streamtypename (,AFAS.runtime)
kibana_cleaned$Tag_StreamTypeName = sub("\\,.*", "", as.character(kibana_cleaned$Tag_StreamTypeName))
#write.csv2(kibana_cleaned, "kibana_cleaned.csv", row.names = FALSE)
buildingDataFrame <- matrix(ncol=4)
EventTypeIndex <- which(colnames(kibana_cleaned) == EventTypeField)
for(i in 1:nrow(kibana_cleaned)){
currentRow <- kibana_cleaned[i, ]
eventType <- currentRow[EventTypeIndex]
currentRow <- currentRow[-EventTypeIndex]
row1 <- currentRow
row1[TargetField]  <- eventType
row2 <- currentRow
row2[SourceField]  <- eventType
buildingDataFrame <- rbind(buildingDataFrame, row1)
buildingDataFrame <- rbind(buildingDataFrame, row2)
}
View(row1)
EventTypeField <- "Tag_Type"
SourceField <- "Tag_StreamTypeName"
TargetField <- "Tag_EventHandlerInstance"
TrackingIDField <- "Tag_MC.TrackingId"
MetricNameField <- "MetricName"
kibana <- read.csv2("kibana_output.csv", sep=",")
useful_columns <- c(TrackingIDField, SourceField, TargetField, EventTypeField, MetricNameField)
kibana_cleaned <- dplyr::select(kibana, useful_columns)
#clean the field when they do not have the right things.
# could be implemented cleaner...
kibana_cleaned <- kibana_cleaned %>% filter(Tag_EventHandlerInstance != "") %>% filter(Tag_StreamTypeName != "") %>% filter(MetricName != "EventProcessingDelay") %>% filter(MetricName != "CreatedCommittable") %>% filter(MetricName != "RepositoryExecuteEvent") %>% mutate(across(everything(), as.character))
# Get rid of the second part in tag_Streamtypename (,AFAS.runtime)
kibana_cleaned$Tag_StreamTypeName = sub("\\,.*", "", as.character(kibana_cleaned$Tag_StreamTypeName))
#write.csv2(kibana_cleaned, "kibana_cleaned.csv", row.names = FALSE)
buildingDataFrame <- matrix(ncol=4)
EventTypeIndex <- which(colnames(kibana_cleaned) == EventTypeField)
for(i in 1:nrow(kibana_cleaned)){
currentRow <- kibana_cleaned[i, ]
eventType <- currentRow[EventTypeIndex]
row1 <- currentRow[-EventTypeIndex]
row1[TargetField]  <- eventType
row2 <- currentRow[-EventTypeIndex]
row2[SourceField]  <- eventType
buildingDataFrame <- rbind(buildingDataFrame, row1)
buildingDataFrame <- rbind(buildingDataFrame, row2)
}
EventTypeField <- "Tag_Type"
SourceField <- "Tag_StreamTypeName"
TargetField <- "Tag_EventHandlerInstance"
TrackingIDField <- "Tag_MC.TrackingId"
MetricNameField <- "MetricName"
kibana <- read.csv2("kibana_output.csv", sep=",")
useful_columns <- c(TrackingIDField, SourceField, TargetField, EventTypeField, MetricNameField)
kibana_cleaned <- dplyr::select(kibana, useful_columns)
#clean the field when they do not have the right things.
# could be implemented cleaner...
kibana_cleaned <- kibana_cleaned %>% filter(Tag_EventHandlerInstance != "") %>% filter(Tag_StreamTypeName != "") %>% filter(MetricName != "EventProcessingDelay") %>% filter(MetricName != "CreatedCommittable") %>% filter(MetricName != "RepositoryExecuteEvent") %>% mutate(across(everything(), as.character))
# Get rid of the second part in tag_Streamtypename (,AFAS.runtime)
kibana_cleaned$Tag_StreamTypeName = sub("\\,.*", "", as.character(kibana_cleaned$Tag_StreamTypeName))
#write.csv2(kibana_cleaned, "kibana_cleaned.csv", row.names = FALSE)
buildingDataFrame <- matrix(ncol=4)
EventTypeIndex <- which(colnames(kibana_cleaned) == EventTypeField)
for(i in 1:nrow(kibana_cleaned)){
currentRow <- kibana_cleaned[i, ]
eventType <- currentRow[EventTypeField]
row1 <- currentRow[-EventTypeField]
row1[TargetField]  <- eventType
row2 <- currentRow[-EventTypeField]
row2[SourceField]  <- eventType
buildingDataFrame <- rbind(buildingDataFrame, row1)
buildingDataFrame <- rbind(buildingDataFrame, row2)
}
EventTypeField <- "Tag_Type"
SourceField <- "Tag_StreamTypeName"
TargetField <- "Tag_EventHandlerInstance"
TrackingIDField <- "Tag_MC.TrackingId"
MetricNameField <- "MetricName"
kibana <- read.csv2("kibana_output.csv", sep=",")
useful_columns <- c(TrackingIDField, SourceField, TargetField, EventTypeField, MetricNameField)
kibana_cleaned <- dplyr::select(kibana, useful_columns)
#clean the field when they do not have the right things.
# could be implemented cleaner...
kibana_cleaned <- kibana_cleaned %>% filter(Tag_EventHandlerInstance != "") %>% filter(Tag_StreamTypeName != "") %>% filter(MetricName != "EventProcessingDelay") %>% filter(MetricName != "CreatedCommittable") %>% filter(MetricName != "RepositoryExecuteEvent") %>% mutate(across(everything(), as.character))
# Get rid of the second part in tag_Streamtypename (,AFAS.runtime)
kibana_cleaned$Tag_StreamTypeName = sub("\\,.*", "", as.character(kibana_cleaned$Tag_StreamTypeName))
#write.csv2(kibana_cleaned, "kibana_cleaned.csv", row.names = FALSE)
buildingDataFrame <- matrix(ncol=4)
EventTypeIndex <- which(colnames(kibana_cleaned) == EventTypeField)
for(i in 1:nrow(kibana_cleaned)){
currentRow <- kibana_cleaned[i, ]
eventType <- currentRow[EventTypeIndex]
row1 <- currentRow[-EventTypeIndex]
row1[TargetField]  <- eventType
row2 <- currentRow[-EventTypeIndex]
row2[SourceField]  <- eventType
buildingDataFrame <- rbind(buildingDataFrame, as.vector(row1))
buildingDataFrame <- rbind(buildingDataFrame, as.vector(row2))
}
View(row1)
View(row2)
View(row1)
EventTypeField <- "Tag_Type"
SourceField <- "Tag_StreamTypeName"
TargetField <- "Tag_EventHandlerInstance"
TrackingIDField <- "Tag_MC.TrackingId"
MetricNameField <- "MetricName"
kibana <- read.csv2("kibana_output.csv", sep=",")
useful_columns <- c(TrackingIDField, SourceField, TargetField, EventTypeField, MetricNameField)
kibana_cleaned <- dplyr::select(kibana, useful_columns)
#clean the field when they do not have the right things.
# could be implemented cleaner...
kibana_cleaned <- kibana_cleaned %>% filter(Tag_EventHandlerInstance != "") %>% filter(Tag_StreamTypeName != "") %>% filter(MetricName != "EventProcessingDelay") %>% filter(MetricName != "CreatedCommittable") %>% filter(MetricName != "RepositoryExecuteEvent") %>% mutate(across(everything(), as.character))
# Get rid of the second part in tag_Streamtypename (,AFAS.runtime)
kibana_cleaned$Tag_StreamTypeName = sub("\\,.*", "", as.character(kibana_cleaned$Tag_StreamTypeName))
#write.csv2(kibana_cleaned, "kibana_cleaned.csv", row.names = FALSE)
buildingDataFrame <- matrix(ncol=4)
EventTypeIndex <- which(colnames(kibana_cleaned) == EventTypeField)
for(i in 1:nrow(kibana_cleaned)){
currentRow <- kibana_cleaned[i, ]
eventType <- currentRow[EventTypeIndex]
row1 <- currentRow[-EventTypeIndex]
row1[TargetField]  <- eventType
row2 <- currentRow[-EventTypeIndex]
row2[SourceField]  <- eventType
buildingDataFrame <- rbind(buildingDataFrame, as.vector(row1))
buildingDataFrame <- rbind(buildingDataFrame, as.vector(row2))
}
View(row1)
View(row2)
EventTypeField <- "Tag_Type"
SourceField <- "Tag_StreamTypeName"
TargetField <- "Tag_EventHandlerInstance"
TrackingIDField <- "Tag_MC.TrackingId"
MetricNameField <- "MetricName"
kibana <- read.csv2("kibana_output.csv", sep=",")
useful_columns <- c(TrackingIDField, SourceField, TargetField, EventTypeField, MetricNameField)
kibana_cleaned <- dplyr::select(kibana, useful_columns)
#clean the field when they do not have the right things.
# could be implemented cleaner...
kibana_cleaned <- kibana_cleaned %>% filter(Tag_EventHandlerInstance != "") %>% filter(Tag_StreamTypeName != "") %>% filter(MetricName != "EventProcessingDelay") %>% filter(MetricName != "CreatedCommittable") %>% filter(MetricName != "RepositoryExecuteEvent") %>% mutate(across(everything(), as.character))
# Get rid of the second part in tag_Streamtypename (,AFAS.runtime)
kibana_cleaned$Tag_StreamTypeName = sub("\\,.*", "", as.character(kibana_cleaned$Tag_StreamTypeName))
#write.csv2(kibana_cleaned, "kibana_cleaned.csv", row.names = FALSE)
buildingDataFrame <- matrix(ncol=4)
EventTypeIndex <- which(colnames(kibana_cleaned) == EventTypeField)
for(i in 1:nrow(kibana_cleaned)){
currentRow <- kibana_cleaned[i, ]
eventType <- currentRow[EventTypeIndex]
row1 <- currentRow[-EventTypeIndex]
row1[TargetField]  <- eventType
row2 <- currentRow[-EventTypeIndex]
row2[SourceField]  <- eventType
print(as.vector(row1))
buildingDataFrame <- rbind(buildingDataFrame, as.vector(row1))
buildingDataFrame <- rbind(buildingDataFrame, as.vector(row2))
}
EventTypeField <- "Tag_Type"
SourceField <- "Tag_StreamTypeName"
TargetField <- "Tag_EventHandlerInstance"
TrackingIDField <- "Tag_MC.TrackingId"
MetricNameField <- "MetricName"
kibana <- read.csv2("kibana_output.csv", sep=",")
useful_columns <- c(TrackingIDField, SourceField, TargetField, EventTypeField, MetricNameField)
kibana_cleaned <- dplyr::select(kibana, useful_columns)
#clean the field when they do not have the right things.
# could be implemented cleaner...
kibana_cleaned <- kibana_cleaned %>% filter(Tag_EventHandlerInstance != "") %>% filter(Tag_StreamTypeName != "") %>% filter(MetricName != "EventProcessingDelay") %>% filter(MetricName != "CreatedCommittable") %>% filter(MetricName != "RepositoryExecuteEvent") %>% mutate(across(everything(), as.character))
# Get rid of the second part in tag_Streamtypename (,AFAS.runtime)
kibana_cleaned$Tag_StreamTypeName = sub("\\,.*", "", as.character(kibana_cleaned$Tag_StreamTypeName))
#write.csv2(kibana_cleaned, "kibana_cleaned.csv", row.names = FALSE)
buildingDataFrame <- matrix(ncol=4)
EventTypeIndex <- which(colnames(kibana_cleaned) == EventTypeField)
for(i in 1:nrow(kibana_cleaned)){
currentRow <- kibana_cleaned[i, ]
eventType <- currentRow[EventTypeIndex]
row1 <- currentRow[-EventTypeIndex]
row1[TargetField]  <- eventType
row2 <- currentRow[-EventTypeIndex]
row2[SourceField]  <- eventType
print(as.character(row1))
buildingDataFrame <- rbind(buildingDataFrame, as.vector(row1))
buildingDataFrame <- rbind(buildingDataFrame, as.vector(row2))
}
EventTypeField <- "Tag_Type"
SourceField <- "Tag_StreamTypeName"
TargetField <- "Tag_EventHandlerInstance"
TrackingIDField <- "Tag_MC.TrackingId"
MetricNameField <- "MetricName"
kibana <- read.csv2("kibana_output.csv", sep=",")
useful_columns <- c(TrackingIDField, SourceField, TargetField, EventTypeField, MetricNameField)
kibana_cleaned <- dplyr::select(kibana, useful_columns)
#clean the field when they do not have the right things.
# could be implemented cleaner...
kibana_cleaned <- kibana_cleaned %>% filter(Tag_EventHandlerInstance != "") %>% filter(Tag_StreamTypeName != "") %>% filter(MetricName != "EventProcessingDelay") %>% filter(MetricName != "CreatedCommittable") %>% filter(MetricName != "RepositoryExecuteEvent") %>% mutate(across(everything(), as.character))
# Get rid of the second part in tag_Streamtypename (,AFAS.runtime)
kibana_cleaned$Tag_StreamTypeName = sub("\\,.*", "", as.character(kibana_cleaned$Tag_StreamTypeName))
#write.csv2(kibana_cleaned, "kibana_cleaned.csv", row.names = FALSE)
buildingDataFrame <- matrix(ncol=4)
EventTypeIndex <- which(colnames(kibana_cleaned) == EventTypeField)
for(i in 1:nrow(kibana_cleaned)){
currentRow <- kibana_cleaned[i, ]
eventType <- currentRow[EventTypeIndex]
row1 <- currentRow[-EventTypeIndex]
row1[TargetField]  <- eventType
row2 <- currentRow[-EventTypeIndex]
row2[SourceField]  <- eventType
buildingDataFrame <- rbind(buildingDataFrame, as.character(row1))
buildingDataFrame <- rbind(buildingDataFrame, as.character(row2))
}
View(buildingDataFrame)
EventTypeField <- "Tag_Type"
SourceField <- "Tag_StreamTypeName"
TargetField <- "Tag_EventHandlerInstance"
TrackingIDField <- "Tag_MC.TrackingId"
MetricNameField <- "MetricName"
kibana <- read.csv2("kibana_output.csv", sep=",")
useful_columns <- c(TrackingIDField, SourceField, TargetField, EventTypeField, MetricNameField)
kibana_cleaned <- dplyr::select(kibana, useful_columns)
#clean the field when they do not have the right things.
# could be implemented cleaner...
kibana_cleaned <- kibana_cleaned %>% filter(Tag_EventHandlerInstance != "") %>% filter(Tag_StreamTypeName != "") %>% filter(MetricName != "EventProcessingDelay") %>% filter(MetricName != "CreatedCommittable") %>% filter(MetricName != "RepositoryExecuteEvent") %>% mutate(across(everything(), as.character))
# Get rid of the second part in tag_Streamtypename (,AFAS.runtime)
kibana_cleaned$Tag_StreamTypeName = sub("\\,.*", "", as.character(kibana_cleaned$Tag_StreamTypeName))
#write.csv2(kibana_cleaned, "kibana_cleaned.csv", row.names = FALSE)
buildingDataFrame <- matrix(ncol=4, nrow=0)
EventTypeIndex <- which(colnames(kibana_cleaned) == EventTypeField)
for(i in 1:nrow(kibana_cleaned)){
currentRow <- kibana_cleaned[i, ]
eventType <- currentRow[EventTypeIndex]
row1 <- currentRow[-EventTypeIndex]
row1[TargetField]  <- eventType
row2 <- currentRow[-EventTypeIndex]
row2[SourceField]  <- eventType
buildingDataFrame <- rbind(buildingDataFrame, as.character(row1))
buildingDataFrame <- rbind(buildingDataFrame, as.character(row2))
}
EventTypeField <- "Tag_Type"
SourceField <- "Tag_StreamTypeName"
TargetField <- "Tag_EventHandlerInstance"
TrackingIDField <- "Tag_MC.TrackingId"
MetricNameField <- "MetricName"
kibana <- read.csv2("kibana_output.csv", sep=",")
useful_columns <- c(TrackingIDField, SourceField, TargetField, EventTypeField, MetricNameField)
kibana_cleaned <- dplyr::select(kibana, useful_columns)
#clean the field when they do not have the right things.
# could be implemented cleaner...
kibana_cleaned <- kibana_cleaned %>% filter(Tag_EventHandlerInstance != "") %>% filter(Tag_StreamTypeName != "") %>% filter(MetricName != "EventProcessingDelay") %>% filter(MetricName != "CreatedCommittable") %>% filter(MetricName != "RepositoryExecuteEvent") %>% mutate(across(everything(), as.character))
# Get rid of the second part in tag_Streamtypename (,AFAS.runtime)
kibana_cleaned$Tag_StreamTypeName = sub("\\,.*", "", as.character(kibana_cleaned$Tag_StreamTypeName))
#write.csv2(kibana_cleaned, "kibana_cleaned.csv", row.names = FALSE)
buildingDataFrame <- matrix(ncol=4, nrow=0)
EventTypeIndex <- which(colnames(kibana_cleaned) == EventTypeField)
for(i in 1:nrow(kibana_cleaned)){
currentRow <- kibana_cleaned[i, ]
eventType <- currentRow[EventTypeIndex]
if(!grepl("event", eventType)){
eventType <- paste(eventType, "event", sep = "_")
}
row1 <- currentRow[-EventTypeIndex]
row1[TargetField]  <- eventType
row2 <- currentRow[-EventTypeIndex]
row2[SourceField]  <- eventType
buildingDataFrame <- rbind(buildingDataFrame, as.character(row1))
buildingDataFrame <- rbind(buildingDataFrame, as.character(row2))
}
View(buildingDataFrame)
EventTypeField <- "Tag_Type"
SourceField <- "Tag_StreamTypeName"
TargetField <- "Tag_EventHandlerInstance"
TrackingIDField <- "Tag_MC.TrackingId"
MetricNameField <- "MetricName"
kibana <- read.csv2("kibana_output.csv", sep=",")
useful_columns <- c(TrackingIDField, SourceField, TargetField, EventTypeField, MetricNameField)
kibana_cleaned <- dplyr::select(kibana, useful_columns)
#clean the field when they do not have the right things.
# could be implemented cleaner...
kibana_cleaned <- kibana_cleaned %>% filter(Tag_EventHandlerInstance != "") %>% filter(Tag_StreamTypeName != "") %>% filter(MetricName != "EventProcessingDelay") %>% filter(MetricName != "CreatedCommittable") %>% filter(MetricName != "RepositoryExecuteEvent") %>% mutate(across(everything(), as.character))
# Get rid of the second part in tag_Streamtypename (,AFAS.runtime)
kibana_cleaned$Tag_StreamTypeName = sub("\\,.*", "", as.character(kibana_cleaned$Tag_StreamTypeName))
#write.csv2(kibana_cleaned, "kibana_cleaned.csv", row.names = FALSE)
buildingDataFrame <- matrix(ncol=4, nrow=0)
EventTypeIndex <- which(colnames(kibana_cleaned) == EventTypeField)
for(i in 1:nrow(kibana_cleaned)){
currentRow <- kibana_cleaned[i, ]
eventType <- currentRow[EventTypeIndex]
if(!grepl("event", eventType, ignore.case = TRUE)){
eventType <- paste(eventType, "event", sep = "_")
}
row1 <- currentRow[-EventTypeIndex]
row1[TargetField]  <- eventType
row2 <- currentRow[-EventTypeIndex]
row2[SourceField]  <- eventType
buildingDataFrame <- rbind(buildingDataFrame, as.character(row1))
buildingDataFrame <- rbind(buildingDataFrame, as.character(row2))
}
View(buildingDataFrame)
EventTypeField <- "Tag_Type"
SourceField <- "Tag_StreamTypeName"
TargetField <- "Tag_EventHandlerInstance"
TrackingIDField <- "Tag_MC.TrackingId"
MetricNameField <- "MetricName"
kibana <- read.csv2("kibana_output.csv", sep=",")
useful_columns <- c(TrackingIDField, SourceField, TargetField, EventTypeField, MetricNameField)
kibana_cleaned <- dplyr::select(kibana, useful_columns)
#clean the field when they do not have the right things.
# could be implemented cleaner...
kibana_cleaned <- kibana_cleaned %>% filter(Tag_EventHandlerInstance != "") %>% filter(Tag_StreamTypeName != "") %>% filter(MetricName != "EventProcessingDelay") %>% filter(MetricName != "CreatedCommittable") %>% filter(MetricName != "RepositoryExecuteEvent") %>% mutate(across(everything(), as.character))
# Get rid of the second part in tag_Streamtypename (,AFAS.runtime)
kibana_cleaned$Tag_StreamTypeName = sub("\\,.*", "", as.character(kibana_cleaned$Tag_StreamTypeName))
buildingDataFrame <- matrix(ncol=4, nrow=0)
EventTypeIndex <- which(colnames(kibana_cleaned) == EventTypeField)
for(i in 1:nrow(kibana_cleaned)){
currentRow <- kibana_cleaned[i, ]
eventType <- currentRow[EventTypeIndex]
if(!grepl("event", eventType, ignore.case = TRUE, fixed = TRUE)){
eventType <- paste(eventType, "event", sep = "_")
}
row1 <- currentRow[-EventTypeIndex]
row1[TargetField]  <- eventType
row2 <- currentRow[-EventTypeIndex]
row2[SourceField]  <- eventType
buildingDataFrame <- rbind(buildingDataFrame, as.character(row1))
buildingDataFrame <- rbind(buildingDataFrame, as.character(row2))
}
write.csv2(kibana_cleaned, "kibana_cleaned.csv", row.names = FALSE)
View(buildingDataFrame)
EventTypeField <- "Tag_Type"
SourceField <- "Tag_StreamTypeName"
TargetField <- "Tag_EventHandlerInstance"
TrackingIDField <- "Tag_MC.TrackingId"
MetricNameField <- "MetricName"
kibana <- read.csv2("kibana_output.csv", sep=",")
useful_columns <- c(TrackingIDField, SourceField, TargetField, EventTypeField, MetricNameField)
kibana_cleaned <- dplyr::select(kibana, useful_columns)
#clean the field when they do not have the right things.
# could be implemented cleaner...
kibana_cleaned <- kibana_cleaned %>% filter(Tag_EventHandlerInstance != "") %>% filter(Tag_StreamTypeName != "") %>% filter(MetricName != "EventProcessingDelay") %>% filter(MetricName != "CreatedCommittable") %>% filter(MetricName != "RepositoryExecuteEvent") %>% mutate(across(everything(), as.character))
# Get rid of the second part in tag_Streamtypename (,AFAS.runtime)
kibana_cleaned$Tag_StreamTypeName = sub("\\,.*", "", as.character(kibana_cleaned$Tag_StreamTypeName))
buildingDataFrame <- matrix(ncol=4, nrow=0)
EventTypeIndex <- which(colnames(kibana_cleaned) == EventTypeField)
for(i in 1:nrow(kibana_cleaned)){
currentRow <- kibana_cleaned[i, ]
eventType <- currentRow[EventTypeIndex]
if(!grepl("event", eventType, ignore.case = TRUE)){
eventType <- paste(eventType, "event", sep = "_")
}
row1 <- currentRow[-EventTypeIndex]
row1[TargetField]  <- eventType
row2 <- currentRow[-EventTypeIndex]
row2[SourceField]  <- eventType
buildingDataFrame <- rbind(buildingDataFrame, as.character(row1))
buildingDataFrame <- rbind(buildingDataFrame, as.character(row2))
}
write.csv2(kibana_cleaned, "kibana_cleaned.csv", row.names = FALSE)
EventTypeField <- "Tag_Type"
SourceField <- "Tag_StreamTypeName"
TargetField <- "Tag_EventHandlerInstance"
TrackingIDField <- "Tag_MC.TrackingId"
MetricNameField <- "MetricName"
kibana <- read.csv2("kibana_output.csv", sep=",")
useful_columns <- c(TrackingIDField, SourceField, TargetField, EventTypeField, MetricNameField)
kibana_cleaned <- dplyr::select(kibana, useful_columns)
#clean the field when they do not have the right things.
# could be implemented cleaner...
kibana_cleaned <- kibana_cleaned %>% filter(Tag_EventHandlerInstance != "") %>% filter(Tag_StreamTypeName != "") %>% filter(MetricName != "EventProcessingDelay") %>% filter(MetricName != "CreatedCommittable") %>% filter(MetricName != "RepositoryExecuteEvent") %>% mutate(across(everything(), as.character))
# Get rid of the second part in tag_Streamtypename (,AFAS.runtime)
kibana_cleaned$Tag_StreamTypeName = sub("\\,.*", "", as.character(kibana_cleaned$Tag_StreamTypeName))
buildingDataFrame <- matrix(ncol=4, nrow=0)
EventTypeIndex <- which(colnames(kibana_cleaned) == EventTypeField)
for(i in 1:nrow(kibana_cleaned)){
currentRow <- kibana_cleaned[i, ]
eventType <- currentRow[EventTypeIndex]
if(!grepl("event", eventType, ignore.case = TRUE)){
eventType <- paste(eventType, "event", sep = "_")
}
row1 <- currentRow[-EventTypeIndex]
row1[TargetField]  <- eventType
row2 <- currentRow[-EventTypeIndex]
row2[SourceField]  <- eventType
buildingDataFrame <- rbind(buildingDataFrame, as.character(row1))
buildingDataFrame <- rbind(buildingDataFrame, as.character(row2))
}
write.csv2(buildingDataFrame, "kibana_cleaned.csv", row.names = FALSE)
EventTypeField <- "Tag_Type"
SourceField <- "Tag_StreamTypeName"
TargetField <- "Tag_EventHandlerInstance"
TrackingIDField <- "Tag_MC.TrackingId"
MetricNameField <- "MetricName"
kibana <- read.csv2("kibana_output.csv", sep=",")
useful_columns <- c(TrackingIDField, SourceField, TargetField, EventTypeField, MetricNameField)
kibana_cleaned <- dplyr::select(kibana, useful_columns)
#clean the field when they do not have the right things.
# could be implemented cleaner...
kibana_cleaned <- kibana_cleaned %>% filter(Tag_EventHandlerInstance != "") %>% filter(Tag_StreamTypeName != "") %>% filter(MetricName != "EventProcessingDelay") %>% filter(MetricName != "CreatedCommittable") %>% filter(MetricName != "RepositoryExecuteEvent") %>% mutate(across(everything(), as.character))
# Get rid of the second part in tag_Streamtypename (,AFAS.runtime)
kibana_cleaned$Tag_StreamTypeName = sub("\\,.*", "", as.character(kibana_cleaned$Tag_StreamTypeName))
buildingDataFrame <- matrix(ncol=4, nrow=0)
EventTypeIndex <- which(colnames(kibana_cleaned) == EventTypeField)
for(i in 1:nrow(kibana_cleaned)){
currentRow <- kibana_cleaned[i, ]
eventType <- currentRow[EventTypeIndex]
if(!grepl("event", eventType, ignore.case = TRUE)){
eventType <- paste(eventType, "event", sep = "_")
}
row1 <- currentRow[-EventTypeIndex]
row1[TargetField]  <- eventType
row2 <- currentRow[-EventTypeIndex]
row2[SourceField]  <- eventType
buildingDataFrame <- rbind(buildingDataFrame, as.character(row1))
buildingDataFrame <- rbind(buildingDataFrame, as.character(row2))
}
colnames(buildingDataFrame) <- c(TrackingIDField, SourceField, TargetField, MetricNameField)
write.csv2(buildingDataFrame, "kibana_cleaned.csv", row.names = FALSE)
View(buildingDataFrame)
EventTypeField <- "Tag_Type"
SourceField <- "Tag_StreamTypeName"
TargetField <- "Tag_EventHandlerInstance"
TrackingIDField <- "Tag_MC.TrackingId"
MetricNameField <- "MetricName"
kibana <- read.csv2("kibana_output.csv", sep=",")
useful_columns <- c(TrackingIDField, SourceField, TargetField, EventTypeField, MetricNameField)
kibana_cleaned <- dplyr::select(kibana, useful_columns)
#clean the field when they do not have the right things.
# could be implemented cleaner...
kibana_cleaned <- kibana_cleaned %>% filter(Tag_EventHandlerInstance != "") %>% filter(Tag_StreamTypeName != "") %>% filter(MetricName != "EventProcessingDelay") %>% filter(MetricName != "CreatedCommittable") %>% filter(MetricName != "RepositoryExecuteEvent") %>% mutate(across(everything(), as.character))
# Get rid of the second part in tag_Streamtypename (,AFAS.runtime)
kibana_cleaned$Tag_StreamTypeName = sub("\\,.*", "", as.character(kibana_cleaned$Tag_StreamTypeName))
buildingDataFrame <- matrix(ncol=4, nrow=0)
EventTypeIndex <- which(colnames(kibana_cleaned) == EventTypeField)
for(i in 1:nrow(kibana_cleaned)){
currentRow <- kibana_cleaned[i, ]
eventType <- currentRow[EventTypeIndex]
if(!grepl("_event", eventType, ignore.case = TRUE)){
eventType <- paste(eventType, "event", sep = "_")
}
row1 <- currentRow[-EventTypeIndex]
row1[TargetField]  <- eventType
row2 <- currentRow[-EventTypeIndex]
row2[SourceField]  <- eventType
buildingDataFrame <- rbind(buildingDataFrame, as.character(row1))
buildingDataFrame <- rbind(buildingDataFrame, as.character(row2))
}
colnames(buildingDataFrame) <- c(TrackingIDField, SourceField, TargetField, MetricNameField)
write.csv2(buildingDataFrame, "kibana_cleaned.csv", row.names = FALSE)
install.packages("tictoc")
MetricNameField <- "MetricName"
kibana <- read.csv2(inputFile, sep=";")
